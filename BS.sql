SET SERVEROUTPUT ON; 

CREATE OR REPLACE PACKAGE INSERSION_TABLAS AS

   
    PROCEDURE INSERTAR_MONTO_INGRESO(
        p_ingreso   IN MONTO_INGRESO.INGRESO%TYPE,
        p_nro_cliente IN MONTO_INGRESO.NRO_CLIENTE%TYPE
    );

    
    PROCEDURE INSERTAR_ESTADO_CREDITO_CLIENTE(
        p_nro_cliente IN ESTADO_CREDITO_CLIENTE.NRO_CLIENTE%TYPE,
        p_hipotecario IN ESTADO_CREDITO_CLIENTE.ESTADO_HIPOTECARIO%TYPE,
        p_consumo IN ESTADO_CREDITO_CLIENTE.ESTADO_CONSUMO%TYPE,
        p_automotriz IN ESTADO_CREDITO_CLIENTE.ESTADO_AUTOMOTRIZ%TYPE,
        p_emergencia IN ESTADO_CREDITO_CLIENTE.ESTADO_EMERGENCIA%TYPE,
        p_arancel IN ESTADO_CREDITO_CLIENTE.ESTADO_ARANCEL%TYPE
    );
    
END INSERSION_TABLAS;
/

CREATE OR REPLACE PACKAGE BODY INSERSION_TABLAS AS
    PROCEDURE INSERTAR_MONTO_INGRESO(
        p_ingreso   IN MONTO_INGRESO.INGRESO%TYPE,
        p_nro_cliente IN MONTO_INGRESO.NRO_CLIENTE%TYPE)
    IS  
    BEGIN
        
        INSERT INTO MONTO_INGRESO (
            COD_MONTO_INGRESO,
            INGRESO,
            NRO_CLIENTE)
        VALUES (
            NULL,
            p_ingreso,
            p_nro_cliente);

        COMMIT;
        
    END INSERTAR_MONTO_INGRESO;

    PROCEDURE INSERTAR_ESTADO_CREDITO_CLIENTE(
    p_nro_cliente IN ESTADO_CREDITO_CLIENTE.NRO_CLIENTE%TYPE,
    p_hipotecario IN ESTADO_CREDITO_CLIENTE.ESTADO_HIPOTECARIO%TYPE,
    p_consumo IN ESTADO_CREDITO_CLIENTE.ESTADO_CONSUMO%TYPE,
    p_automotriz IN ESTADO_CREDITO_CLIENTE.ESTADO_AUTOMOTRIZ%TYPE,
    p_emergencia IN ESTADO_CREDITO_CLIENTE.ESTADO_EMERGENCIA%TYPE,
    p_arancel IN ESTADO_CREDITO_CLIENTE.ESTADO_ARANCEL%TYPE)
    
    IS 
    
    BEGIN
    
    INSERT INTO ESTADO_CREDITO_CLIENTE(
    COD_ESTADO_CREDITO_CLIENTE,
        ESTADO_HIPOTECARIO,
        ESTADO_CONSUMO,
        ESTADO_AUTOMOTRIZ,
        ESTADO_EMERGENCIA,
        ESTADO_ARANCEL,
        NRO_CLIENTE)
    
    VALUES (
        NULL,
        p_hipotecario,
        p_consumo,
        p_automotriz,
        p_emergencia,
        p_arancel,
        p_nro_cliente
    );

    COMMIT;
    
    END INSERTAR_ESTADO_CREDITO_CLIENTE;
        

END INSERSION_TABLAS;



CREATE OR REPLACE PACKAGE VALIDACION_CREDITOS AS

   
    FUNCTION CREDITO_HIPOTECARIO(
        P_INGRESO MONTO_INGRESO.ingreso%TYPE, 
        P_COD_TIPO_CLIENTE TIPO_CLIENTE.COD_TIPO_CLIENTE%TYPE
    )
    RETURN BOOLEAN;

    
    FUNCTION CREDITO_CONSUMO(
        P_INGRESO MONTO_INGRESO.ingreso%TYPE
    )
    RETURN BOOLEAN;
    
    
    FUNCTION CREDITO_AUTOMOTRIZ(
        P_INGRESO MONTO_INGRESO.ingreso%TYPE, 
        P_COD_TIPO_CLIENTE TIPO_CLIENTE.COD_TIPO_CLIENTE%TYPE
    )
    RETURN BOOLEAN;
    
  
    FUNCTION CREDITO_EMERGENCIA(
        P_INGRESO MONTO_INGRESO.ingreso%TYPE, 
        P_COD_TIPO_CLIENTE TIPO_CLIENTE.COD_TIPO_CLIENTE%TYPE
    )
    RETURN BOOLEAN;
    
    
    FUNCTION CREDITO_PAGO_ARANCEL(
        P_INGRESO MONTO_INGRESO.ingreso%TYPE, 
        P_COD_TIPO_CLIENTE TIPO_CLIENTE.COD_TIPO_CLIENTE%TYPE
    )
    RETURN BOOLEAN;
    
END VALIDACION_CREDITOS;
/



CREATE OR REPLACE PACKAGE BODY VALIDACION_CREDITOS AS

    FUNCTION CREDITO_HIPOTECARIO(P_INGRESO MONTO_INGRESO.ingreso%type, P_COD_TIPO_CLIENTE TIPO_CLIENTE.COD_TIPO_CLIENTE%TYPE)        
    
        RETURN BOOLEAN
    IS
        
        
    BEGIN
        RETURN (P_INGRESO >= 1500000) AND (P_COD_TIPO_CLIENTE IN (1,2));
    END CREDITO_HIPOTECARIO;
    
    FUNCTION CREDITO_CONSUMO(P_INGRESO MONTO_INGRESO.ingreso%type)        
    
        RETURN BOOLEAN
    IS
        
        
    BEGIN
        RETURN (P_INGRESO >= 900000);
    END CREDITO_CONSUMO;
    
    
    FUNCTION CREDITO_AUTOMOTRIZ(P_INGRESO MONTO_INGRESO.ingreso%type, P_COD_TIPO_CLIENTE TIPO_CLIENTE.COD_TIPO_CLIENTE%TYPE)        
    
        RETURN BOOLEAN
    IS
        
        
    BEGIN
        RETURN (P_INGRESO >= 900000) AND (P_COD_TIPO_CLIENTE IN (1,2));
    END CREDITO_AUTOMOTRIZ; 
         
         
     FUNCTION CREDITO_EMERGENCIA(P_INGRESO MONTO_INGRESO.ingreso%type, P_COD_TIPO_CLIENTE TIPO_CLIENTE.COD_TIPO_CLIENTE%TYPE)        
    
        RETURN BOOLEAN
    IS
        
        
    BEGIN
        RETURN ((P_INGRESO >= 900000) AND (P_COD_TIPO_CLIENTE IN (1, 2))) OR ((P_INGRESO >= 150000) AND (P_COD_TIPO_CLIENTE IN (3)));
    
    END CREDITO_EMERGENCIA; 
    
    FUNCTION CREDITO_PAGO_ARANCEL(P_INGRESO MONTO_INGRESO.ingreso%type, P_COD_TIPO_CLIENTE TIPO_CLIENTE.COD_TIPO_CLIENTE%TYPE)        
    
        RETURN BOOLEAN
    IS
        
        
    BEGIN
        RETURN (P_INGRESO >= 900000) AND (P_COD_TIPO_CLIENTE IN (1,2));
    END CREDITO_PAGO_ARANCEL;
         
           
    
END VALIDACION_CREDITOS;
/

DECLARE

    V_COD_MONTO_INGRESO MONTO_INGRESO.cod_monto_ingreso%type;
    V_INGRESO MONTO_INGRESO.ingreso%type;
    V_N_TIPO_CLIENTE TIPO_CLIENTE.cod_tipo_cliente%type;
    
    V_RESULTADO_HIPOTECARIO BOOLEAN;
    V_RESULTADO_CONSUMO BOOLEAN;
    V_RESULTADO_AUTOMOTRIZ BOOLEAN;
    V_RESULTADO_EMERGENCIA BOOLEAN;
    V_RESULTADO_ARANCEL BOOLEAN;

      CURSOR CUR_INGRESO IS
        SELECT 
            MI.COD_MONTO_INGRESO AS "ID_MONTO:INGRESO"
            , MI.INGRESO AS "INGRESO"
            , TC.COD_TIPO_CLIENTE AS "ID_TIPO_CLIENTE"
        INTO V_COD_MONTO_INGRESO,V_INGRESO,V_N_TIPO_CLIENTE
        FROM MONTO_INGRESO MI
        JOIN CLIENTE C ON C.COD_MONTO_INGRESO = MI.COD_MONTO_INGRESO
        JOIN TIPO_CLIENTE TC ON TC.COD_TIPO_CLIENTE = C.COD_TIPO_CLIENTE;


    

    BEGIN
        FOR I IN CUR_INGRESO
            LOOP
                 V_RESULTADO_HIPOTECARIO:= validacion_creditos.credito_hipotecario(I.INGRESO,I.ID_TIPO_CLIENTE);
                 V_RESULTADO_CONSUMO:= validacion_creditos.credito_consumo(I.INGRESO);
                 V_RESULTADO_AUTOMOTRIZ := validacion_creditos.credito_automotriz(I.INGRESO,I.ID_TIPO_CLIENTE);
                 V_RESULTADO_EMERGENCIA:=validacion_creditos.credito_emergencia(I.INGRESO,I.ID_TIPO_CLIENTE);
                 V_RESULTADO_ARANCEL:= validacion_creditos.credito_pago_arancel(I.INGRESO,I.ID_TIPO_CLIENTE);
            --HACER COMPATIBLE EL BOOLEAN CON EL NUMBER DE LA TABLA ESTADO CREDITOS
            
            END LOOP;
        
    
END;
/





CREATE TABLE MONTO_INGRESO(
    COD_MONTO_INGRESO NUMBER(5,0)PRIMARY KEY,
    INGRESO NUMBER(20),
    NRO_CLIENTE NUMBER(5,0),
    FOREIGN KEY(NRO_CLIENTE) REFERENCES CLIENTE(NRO_CLIENTE),
    UNIQUE(NRO_CLIENTE)
)


CREATE TABLE ESTADO_CREDITO_CLIENTE (
    COD_ESTADO_CREDITO_CLIENTE NUMBER(5,0) PRIMARY KEY,
    ESTADO_HIPOTECARIO NUMBER(1,0), --1 = TRUE 0 = FALSE
    ESTADO_CONSUMO NUMBER(1,0),
    ESTADO_AUTOMOTRIZ NUMBER(1,0),
    ESTADO_EMERGENCIA NUMBER(1,0),
    ESTADO_ARANCEL NUMBER(1,0),
    NRO_CLIENTE NUMBER(5,0),
    FOREIGN KEY(NRO_CLIENTE) REFERENCES CLIENTE(NRO_CLIENTE),
    UNIQUE(NRO_CLIENTE)
)

CREATE SEQUENCE SEQ_ID_MONTO_INGRESO
START WITH 1      
INCREMENT BY 1    
NOCACHE;

CREATE OR REPLACE TRIGGER TRG_SEQ_ID_MONTO_INGRESO
BEFORE INSERT ON MONTO_INGRESO

    FOR EACH ROW
        BEGIN 
            IF :NEW.COD_MONTO_INGRESO IS NULL THEN
                SELECT SEQ_ID_MONTO_INGRESO.NEXTVAL 
                INTO :NEW.COD_MONTO_INGRESO
                FROM DUAL; //<--SOLO PARA SINTAXIS
            END IF;
END;


CREATE SEQUENCE SEQ_ID_ESTADO_CREDITO_CLIENTE
START WITH 1      
INCREMENT BY 1    
NOCACHE;

CREATE OR REPLACE TRIGGER TRG_SEQ_ID_ESTADO_CREDITO_CLIENTE
BEFORE INSERT ON ESTADO_CREDITO_CLIENTE

    FOR EACH ROW
        BEGIN 
            IF :NEW.COD_ESTADO_CREDITO_CLIENTE IS NULL THEN
                SELECT SEQ_ID_ESTADO_CREDITO_CLIENTE.NEXTVAL 
                INTO :NEW.COD_ESTADO_CREDITO_CLIENTE
                FROM DUAL; //<--SOLO PARA SINTAXIS
            END IF;
END;














